// Applies the Gradle SSH plugins from before.
plugins {
    id "java"
    id "org.hidetake.ssh" version "2.9.0"
    id "jaci.gradle.EmbeddedTools" version "2018.12.18"
}

apply from: "credentials.gradle"



// Creates a FileTree object to only pull all .py files within
// the python folder in directory path for deployment.
FileTree pytree = fileTree(dir: 'src/python', include: ['*.py', '*.pkl'])
FileTree bashtree = fileTree(dir: 'src/bash', include: '*.sh')
FileTree startuptree = fileTree(dir: 'startup', include: '*.service')

// Identifies the remote with a name, jetson, and a host static
// IP as well as teh username, roboloco. SSH Keys are required
// to be able to deploy, and setup must be done beforehand.
remotes {
    jetson {
        host = hostIP // you'll need the real IP here.
        user = sshUser  
        password = sshPass 
        agent = false
    }
}

task deployJetson {
    ssh.run {
        settings {
            // This private keyu stuff isn't working.  
            //I don't know why yet.  So use user/pass for now.
            // path to the private key
            // identity = file('')            
            knownHosts = allowAnyHosts
        }
        session(remotes.jetson) {
            // put from: '/Users/y0shi/workspace/frc/JetsonPythonSample/src/python/', into: '/home/nvidia/6829/vision/python', filter: { it.name =~ /\.py$/ }
            // make all the directories.  ignore errors in case they're already there.
            execute ('mkdir 6829', ignoreError: true)
            execute ('mkdir 6829/vision', ignoreError: true)
            execute ('mkdir 6829/vision/python', ignoreError: true)
            execute ('mkdir 6829/vision/bash', ignoreError: true)
            execute ('mkdir 6829/vision/init.d', ignoreError: true)
            put from: pytree, into: '6829/vision/python'
            put from: bashtree, into: '6829/vision/bash'
            put from: startuptree, into: '6829/vision/init.d'
            
            executeSudo 'cp  /home/nvidia/6829/vision/init.d/sortcams.service /etc/systemd/system/sortcams.service', pty: true, sudoPassword: sshPass, ignoreError: true
            executeSudo 'cp  /home/nvidia/6829/vision/init.d/streamcam.service /etc/systemd/system/streamcam.service', pty: true, sudoPassword: sshPass, ignoreError: true
            executeSudo 'cp  /home/nvidia/6829/vision/init.d/vision.service /etc/systemd/system/vision.service', pty: true, sudoPassword: sshPass, ignoreError: true

            executeSudo 'systemctl daemon-reload', pty: true, sudoPassword: sshPass, ignoreError: true

            // enable so they start automatically.
            executeSudo 'systemctl reenable sortcams.service', pty: true, sudoPassword: sshPass, ignoreError: true
            executeSudo 'systemctl reenable vision.service', pty: true, sudoPassword: sshPass, ignoreError: true
            executeSudo 'systemctl reenable streamcam.service', pty: true, sudoPassword: sshPass, ignoreError: true
            
            // stop the services but don't stop if this fails.
            executeSudo 'systemctl stop vision', pty: true, sudoPassword: sshPass, ignoreError: true
            executeSudo 'systemctl stop streamcam', pty: true, sudoPassword: sshPass, ignoreError: true
            
            executeSudo 'systemctl start sortcams', pty: true, sudoPassword: sshPass
            executeSudo 'systemctl start vision', pty: true, sudoPassword: sshPass
            executeSudo 'systemctl start streamcam', pty: true, sudoPassword: sshPass
        }
    }
}

deploy {
    targets {
        target('jetson') {
            // If you are setting up, comment out the line 
            // below to prevent a error.
            deployJetson
            }
    }
}

